#!/sbin/sh
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright (c) 2009, 2011, Oracle and/or its affiliates. All rights reserved.
#

# Make sure that the libraries essential to this stage of booting can be found.
LD_LIBRARY_PATH=/lib; export LD_LIBRARY_PATH

AUTOINSTALL=0

#
# Text Installer script
#
TI_SMF_SETUP="svc:/system/install-setup:default"
CLI_LOGIN="svc:/system/console-login:default"
MANIFEST_LOC="svc:/application/manifest-locator:default"
SVCADM=/usr/sbin/svcadm
TEXT_FLAG="true"

PRTCONF=/usr/sbin/prtconf
SED=/usr/bin/sed
CUT=/usr/bin/cut
GREP=/usr/bin/grep
MKDIR=/usr/bin/mkdir
WGET=/usr/bin/wget
MOUNT=/sbin/mount
DHCPINFO=/sbin/dhcpinfo
TMPFS_MOUNT=/usr/lib/fs/tmpfs/mount

# WGET Options
# these provide for a (900*20*2) 18,000 second window where the image server
# can be down or otherwise not responsive before the client gives up; while
# still allowing wget to fail and drop the system to console login for
# debugging if necessary
TIMEOUT=900
TRIES=20

# Image Info file (needed for x86 AI, and both for Text Installs)
IMAGE_INFO=".image_info"

# Save folder information (needed for Text Installs)
SAVE="save"
SAVE_LIST="save_list"

# Sparc installation configuration
INSTALL_CONF_FILE="install.conf"
INSTALL_CONF_SPEC="/tmp/$INSTALL_CONF_FILE"
NETBOOT="/etc/netboot"
WANBOOT_CONF="$NETBOOT/wanboot.conf"

# compressed archives
SOLARIS_ZLIB="solaris.zlib"
SOLARISMISC_ZLIB="solarismisc.zlib"

# DHCP Options
BOOTSERVER="BootSrvA"

#
# Exit with SMF_EXIT_OK if not invoked in an Automated Installer
# environment
#
if [ ! -f /.autoinstall ] ; then
	exit $SMF_EXIT_OK
fi

. /lib/svc/share/live_fs_include.sh
. /lib/svc/share/smf_include.sh
. /lib/svc/share/fs_include.sh

ISA_INFO=$(/sbin/uname -p)

echo "Preparing install image for use" > /dev/msglog

#
# For SPARC mount wanbootfs which contains wanboot.conf file
# associated with this client. root_file option defined there
# points to the boot archive and has following format:
# root_file=<ai_image>/boot/platform/sun4v/boot_archive
# We need to extract <ai_image> part, since this is the
# location of solaris*.zlib archives.
#
# For X86, get the install media from the menu.lst 
#
if [ "$ISA_INFO" = "sparc" ]; then
	# check if wanboot provided wanbootfs
	BOOTFS_DISK="/devices/ramdisk-bootfs:a"

	# create mountpoint for wanbootfs
	$MKDIR "$NETBOOT"

	if [ $? -ne 0 ] ; then
		echo "Could not create $NETBOOT directory" > \
		    /dev/msglog

		exit $SMF_EXIT_ERR_FATAL
	fi

	# mount wanbootfs which is hsfs(7FS) filesystem
	$MOUNT -F hsfs -o ro "$BOOTFS_DISK" "$NETBOOT" > \
	    /dev/msglog 2>&1

	if [ $? -ne 0 ] ; then
		echo "Could not mount wanbootfs filesystem" > \
		    /dev/msglog

		exit $SMF_EXIT_ERR_FATAL
	fi

	# check, if wanboot.conf is present
	if [ ! -f $WANBOOT_CONF ] ; then
		echo "$WANBOOT_CONF file not found" > /dev/msglog

		exit $SMF_EXIT_ERR_FATAL
	fi

	# concatentate host files from system and wanbootfs
	if [[ -f ${NETBOOT}/etc/hosts ]]; then
		/usr/bin/cat ${NETBOOT}/etc/hosts >> /etc/inet/hosts
	fi

	# extract path to directory containing AI image
	ai_image_dir=$($GREP "^root_file" $WANBOOT_CONF | \
	    $CUT -d '=' -f 2 | \
	    $SED -e s-boot/platform/sun4v/boot_archive--)

	if [ -z "$ai_image_dir" ] ; then
		echo "Could not obtain location of AI image" > \
		    /dev/msglog

		exit $SMF_EXIT_ERR_FATAL
	fi

	#
	# extract address of AI server from root_server option
	# It is in following format:
	# root_server=http://<ai_server>:<port>/<path_to_wanboot-cgi>
	#
	ai_server=$($GREP "^root_server" $WANBOOT_CONF | \
	    $CUT -d '=' -f 2 | $CUT -d '/' -f 1-3)

	if [ -z "$ai_server" ] ; then
		echo "Could not obtain address of AI server" > \
		    /dev/msglog

		exit $SMF_EXIT_ERR_FATAL
	fi

	MEDIA="$ai_server$ai_image_dir"
	
	#
	# Check if the install flag is present in the bootargs.
	# If it is present then it will be an AI install,
	# so set TEXT_FLAG to "false"
	#
	set -- `$PRTCONF -vp | $GREP "bootargs" | $CUT -f 2 -d\'`
	while (( $# > 0 )) ; do
		case $1 in

		install)
			TEXT_FLAG="false"
			break
			;;
		*)
			shift
			;;
		esac
	done


else
	# Get the install media data to use in http url
	MEDIA=$($PRTCONF -v /devices | \
	    $SED -n '/install_media/{;n;p;}' | \
	    $CUT -f 2 -d \')

	# if the AI server is the $serverIP keyword then the boot server
	# needs to be substituted
	if [ -n "$(print $MEDIA | $GREP '$serverIP')" ]; then
		if [ -z $($DHCPINFO $BOOTSERVER) ] ; then
			echo "Could not obtain address of AI server from " \
			    "DHCP server" > /dev/msglog

			exit $SMF_EXIT_ERR_FATAL
		fi
		MEDIA=$(print $MEDIA | \
		    $SED "s/\$serverIP/$($DHCPINFO $BOOTSERVER)/")

	fi

	if [ -z "$MEDIA" ]; then
		echo "Could not obtain address of AI server from GRUB menu" > \
		    /dev/msglog

		exit $SMF_EXIT_ERR_FATAL
	fi


	#
	# Check if the install flag is present in the bootargs.
	# If it is present then it will be an AI install,
	# so set TEXT_FLAG to "false"
	#
	INSTALL_FLAG=`$PRTCONF -v /devices | \
	    $SED -n "/'install'/{;n;p;}" | \
	    $CUT -f 2 -d \'`

	if [ "$INSTALL_FLAG" == "true" ] ;then 
	    TEXT_FLAG="false"
	fi
fi

#
# Translate to valid url - it is dummy operation for now
# since it is assumed that complete and valid URL was provided
#
url=$MEDIA
if [ -z "$url" ]
then
	echo "Could not determine source of install image" > \
	    /dev/msglog
	exit $SMF_EXIT_ERR_FATAL
fi

# Mount /tmp to download files
$TMPFS_MOUNT swap /tmp
if [ $? -ne 0 ]
then
	echo "Mounting swap FAILED!" > /dev/msglog
	exit $SMF_EXIT_ERR_FATAL
fi

config_file=""
# download the install.conf file to get the service name for SPARC
if [[ "$ISA_INFO" == "sparc" ]]; then
	config_file="$INSTALL_CONF_FILE"
fi

# Download compressed archives and configuration information all into tmp
for file in $SOLARIS_ZLIB $SOLARISMISC_ZLIB $IMAGE_INFO $config_file; do

	print "Downloading $file" > /dev/msglog
	cmd="$WGET --continue --tries=1 --timeout=$TIMEOUT ${url}/$file -O /tmp/$file"

	# loop retrying to download $file
	tries=0
	while (( tries < TRIES )) && ! $cmd >/dev/msglog 2>&1; do
		print "Retrying wget(1) of $file in $TIMEOUT seconds"
		sleep $TIMEOUT
		tries=$((tries+1))
	done

	# if we used all the tries, then we failed
	if (( tries >= TRIES )); then
		print "Could not obtain $url/$file from install server" \
		    > /dev/msglog
		print "Please verify that the install server is correctly" \
		    "configured and reachable from the client" > /dev/msglog
		exit $SMF_EXIT_ERR_FATAL
	fi
done

# Lofi mount downloaded archives to /usr and /mnt/misc respectively

#
# Can not mount solaris.zlib using just the mount command,
# because the mount command enforces nosetuid, and /usr
# needs to have the setuid capability.
#
# Additionally:
# Must use lofiadm in combination with the mount command,
# as with the changes to make lofi work from within a zone,
# a properly populated /dev tree is required to use simply
# "mount" - this applies to both .zlib files.
#

usr_lofi_dev=$(/usr/sbin/lofiadm -a /tmp/$SOLARIS_ZLIB)
if [ $? -ne 0 -o -z "$usr_lofi_dev" ]
then
	echo "Could not lofi mount /usr filesystem" > /dev/msglog
	exit $SMF_EXIT_ERR_FATAL
fi

$MOUNT -F hsfs -o ro $usr_lofi_dev /usr
if [ $? -ne 0 ]
then
	echo "Could not mount /usr filesystem" > /dev/msglog
	exit $SMF_EXIT_ERR_FATAL
fi

misc_lofi_dev=$(/usr/sbin/lofiadm -a /tmp/$SOLARISMISC_ZLIB)
if [ $? -ne 0 -o -z "$misc_lofi_dev" ]; then
	echo "Could not lofi mount /mnt/misc filesystem" > /dev/msglog
	exit $SMF_EXIT_ERR_FATAL
fi

$MOUNT -F hsfs ${misc_lofi_dev} /mnt/misc
if [ $? -ne 0 ]
then
	echo "Could not mount /mnt/misc" > /dev/msglog
	exit $SMF_EXIT_ERR_FATAL
fi
echo "Done mounting install image" > /dev/msglog

#
# If requested, enable remote access via ssh
#
if [ $ISA_INFO = "sparc" ] ; then
	AI_ENABLE_SSH=$($GREP "^livessh" $INSTALL_CONF_SPEC | \
	    $CUT -d'=' -f2)
else
	AI_ENABLE_SSH=$($PRTCONF -v /devices | \
	    $SED -n '/livessh/{;n;p;}' | $CUT -f 2 -d\')
fi

if [ "$AI_ENABLE_SSH" = "enable" ]; then
	# generate ssh keys
	/lib/svc/method/sshd -c

	# enabled ssh server
	/usr/sbin/svcadm enable network/ssh
fi

#
# TEXT_FLAG is used to tell if we are using the text install over net boot
#
if [ "$TEXT_FLAG" == "true" ]; then
	if [ "$ISA_INFO" == "i386" ]; then
		mkdir /tmp/amd64
		mkdir -p /.cdrom/platform/i86pc/amd64
		
		TYPE=`isainfo -b` 
		if [ "$TYPE" == "32" ]; then
			$WGET $url/platform/i86pc/amd64/boot_archive -O /tmp/amd64/boot_archive > /dev/msglog 2>&1
			if [ "$?" != "0" ]; then
				echo "ERROR: Failed to download amd64 boot Archive" > /dev/msglog
				exit $SMF_EXIT_ERR_FATAL
			fi
			ln -s /tmp/amd64/boot_archive /.cdrom/platform/i86pc/amd64/boot_archive
		else
			$WGET $url/platform/i86pc/boot_archive -O /tmp/boot_archive > /dev/msglog 2>&1
			if [ "$?" != "0" ]; then
				echo "ERROR: Failed to download i86pc boot Archive" > /dev/msglog
				exit $SMF_EXIT_ERR_FATAL
			fi
			ln -s /tmp/boot_archive /.cdrom/platform/i86pc/boot_archive
		fi
	fi
	
	# Retrieve the 'save' files (needed by remove_livecd_environment ICT)
	cd /tmp
	$WGET -x -i $url/$SAVE_LIST > /dev/msglog 2>&1
	if [ "$?" != "0" ]; then
		echo "ERROR: Failed to download save folder contents" > /dev/msglog
		exit $SMF_EXIT_ERR_FATAL
	fi
	save_folder=$(print $url | $SED 's#.*//##')/$SAVE
	cd -

	# When net-booted, only the contents of /.cdrom/save
	# (catalogued in the save_list)
	# are relevant to the '.livecd-cdrom-content' file
	$WGET $url/$SAVE_LIST -O /tmp/.livecd-cdrom-content
	

	# Link all of the downloaded files to where they should be in order to mimick CD
	ln -s /tmp/solarismisc.zlib /.cdrom/solarismisc.zlib
	ln -s /.volsetid /.cdrom/.volsetid 
	ln -s /tmp/.image_info /.cdrom/.image_info
	ln -s /tmp/.livecd-cdrom-content /.cdrom/.livecd-cdrom-content
	ln -s /tmp/$save_folder /.cdrom/save

	$SVCADM disable -s $CLI_LOGIN 
	if [ "$?" != "0" ]; then
		echo "svcadm failed to disable client login" > /dev/msglog
		exit $SMF_EXIT_ERR_FATAL
	fi
	#Disable manifest locator
	$SVCADM disable -s $MANIFEST_LOC	
	if [ "$?" != "0" ]; then
		echo "svcadm failed to disable manifest locator" > /dev/msglog
		exit $SMF_EXIT_ERR_FATAL
	fi

	# Enable the text install SMF scripts
	$SVCADM enable  $TI_SMF_SETUP 
	if [ "$?" != "0" ]; then
		echo "svcadm failed to enable Text Install SMF script" > /dev/msglog
		exit $SMF_EXIT_ERR_FATAL
	fi
fi

#
# Also mount /boot now so that things like keymap.sh can access
# boot properties through eeprom.  Readonly isn't required because
# /boot (and other pcfs filesystems) aren't fsck'ed at boot yet.
# Also, we don't account for caching /boot as it must be on a local
# disk.  So what's in vfstab is fine as it stands; just look to see
# if it's there and avoid the mount if not.
#
readvfstab "/boot" < $vfstab

if [ -n "$mountp" ]; then
	mountfs - /boot $fstype $mntopts - || exit $SMF_EXIT_ERR_FATAL
fi

#
# Update kernel driver.conf cache with any additional driver.conf
# files found on /usr, and device permissions from /etc/minor_perm.
#
/usr/sbin/devfsadm -I -P

[ -f /etc/.dynamic_routing ] && /usr/bin/rm -f /etc/.dynamic_routing

libc_mount

# 
# Discover architecture and find and mount optimal libc_psr 
#  
PLAT=$(/usr/bin/uname -i) 
ARCH=$(/usr/bin/uname -m)
if [ "$ARCH" = "sun4v" ]; then 
	sun4v_libc_psr_mount 
elif [ "$ARCH" = "sun4u" ]; then 
	if [ -h /platform/$PLAT/lib/libc_psr.so.1 ]; then 
		LINKSTO=$(/usr/bin/ls -l /platform/$PLAT/lib/libc_psr.so.1 |\
			/usr/bin/awk '{print $NF}') 
		if [ "$LINKSTO" = "../../sun4u-us3/lib/libc_psr.so.1" ]; then 
			ARCH=sun4u-us3 
		fi
	fi
	sun4u_libc_psr_mount 
fi

#
# All SMF services are imported and sevice profiles are applied to the
# boot archive during image construction time.  However, the link
# for the platform.xml service profile is not created because
# we are unable to determine the platform on which the image will
# be booted on during build time.
#
# The link for platform.xml file must be created during boot time
# depending on platform type.
#
apply_platform_profile

/usr/bin/rm -f /etc/svc/repository-boot*

# Mount opt
/usr/sbin/mount -F lofs /mnt/misc/opt /opt

update_linker_cache

exit 0
