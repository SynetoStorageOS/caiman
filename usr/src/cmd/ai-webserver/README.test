#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
# Copyright (c) 2009, 2010, Oracle and/or its affiliates. All rights reserved. 
#
# README.test - testing procedures
#

AI manifest webserver
=================================
Name of executable: /usr/lib/installadm/webserver
Package: pkg:/install/installadm
Implementation: Python script

Purpose: Server for providing an AI client an AI manifest given a set of
criteria from the AI client's AI Service Choosing Engine (AISC).

Resources:	 <ai service directory>/AI.db - AI manifest criteria SQLite3
						database
			 <ai service directory>/AI_data - Directory storing AI manifests
			 <ai service directory>/AI_files - Directory storing AI image
							   (not used at this time)

[1] Look up manifests served by AI web server
-----------------------------------------------------
* Prerequisites:
  - Running AI web server

	Steps:
	*Use web-browser to connect to AI webserver running at the port specified
	 on its command line (i.e. http://localhost:46501)
	*See table presented with manifest names (which are links to the XML
	 files) and manifest criteria as stored in the SQLite3 database

[2] Emulate communication between AI web server and AISC
-----------------------------------------------------
* Prerequisites:
  - Running AI web server
  - Criteria listed from AISC in list mode (please refer to AI web server
	testing procedure for appropriate information)

	Steps:
	*Use web-browser to connect to AI webserver running at the port specified
	 on its command line and go to the generated page /manifest.html
	 (i.e. http://localhost:46501/manifest.html).
	*Check for requested criteria under the "Criteria:" header (between braces).
	*Enter criteria requested by server (or as provided by AISC) into the text
	 box provided. Ensure each criteria pair is spearated by a semi-colon (see
	 instructions on web page).
	*AI webserver will provide back the manifest matched by the criteria
	 provided. Or, if no criteria matched or an error was encountered the
	 default manifest (default.xml) will be returned. An error will be logged
	 to the webserver's standard out.
	
[3] Enable debug mode in webserver
-----------------------------------------------------
* Prerequisites:
  - Setup AI web server

	Steps:
	*To enable webserver debug mode simply start the webserver with the -d
	 flag. This will allow stack traces to be printed out standard error in
	 the case of a webserver failure

AI criteria database
=================================
Name of executable: <ai service directory>/AI.db
Package: pkg:/install/installadm
Implementation: SQLite3 Database

Purpose: Database to allow rapid look up of criteria as provided by AI
criteria manifests.

Schema:
	name (text)		-	name of AI manifest XML file located in webserver
							AI_data directory
	instance (integer)	-	instance of AI manifest XML file (each criteria set
							for a manifest is a difference instance)
	<crit0-critN>		-	each criteria supported by the AI webserver must be
	(text int. or hex)		defined as a database column. Currently the special
					columns named with a prefix MIN or MAX are range
					criteria. These get special treatment in the AI
					webserver. If either a MIN or MAX value is set, a
					null value in the opposing column will mean an
					unbounded range (i.e. from -inf. to MAXcrit, or
					vice versa). Currently, the special column name
					"mac" is handed as a hexadecimal column and
					recieves special treatment as such (must be a even
					number of digits due to SQLite, and must be
					compared to an equal length number or an error will
					result. Similarly, to insert a hexadecimal number
					the special SQL syntax x'<number>' needs to be used
					for insertion or comparison.

[1] To print out supported criteria in AI.db using sqlite3(1)
-----------------------------------------------------
* Prerequisites:
  - A created AI.db (under /var/ai/<ai-webserver port #>/AI.db)
  - A working copy of SQLite3 (/usr/bin/sqlite3 from pkg:/database/sqlite-3)
	
	To print out which criteria are supported view the database's schema by:
	*Run /usr/bin/sqlite3 /var/ai/<ai-webserver port #>/AI.db
	*At the "sqlite>" prompt enter ".schema" to receive a listing like:
CREATE TABLE manifests (name TEXT, instance INTEGER, arch TEXT, MINmac INTEGER,
MAXmac INTEGER, MINipv4 INTEGER, MAXipv4 INTEGER, cpu TEXT, platform TEXT,
MINnetwork INTEGER, MAXnetwork INTEGER, MINmem INTEGER, MAXmem INTEGER);
	*This table would support the following value criteria:
	 arch, cpu, platform
	*This table would further support the following range criteria:
	 mac, ipv4, network, mem

[2] To debug SQL statements made between AI.db and the AI webserver or
	publish-manifest(1)
-----------------------------------------------------
* Prerequisites:
	- Access to a test system installed with pkg:/install/installadm

	Steps:
	*Open in an editor:
	/usr/lib/python2.4/vendor-packages/osol_install/auto_install/AI_database.py
	*Modify DBthread.run() to print out statement being made and result by
	-Print out SQL statements for every query run by adding below the comment
	 "skip already processed DBrequest's" and associated if by adding:
	 print "%s" % request.getSql()
	-Print responses from the database by appropriately using the data returned
	 by self._cursor.fetchall() i.e [print "%s" % resp for resp in self._cursor.fetchall()]

properties.py set-default and get-default
=========================================
Name of executable (being tested): <ai service directory>/properties.py
Package: pkg:/install/installadm
Implementation: Python script

The man_test_default.py pyunit test is used.  It is run like any other pyunit
test.  It is set up in its own subdirectory (manual-test) so that it is *not*
run with other pyunit tests during gate-push-triggered automated testing.

This test is not automated as it makes changes to the host system.  It will set
up installer SMF service properties and will create some directories in /var/ai.

This test creates a dummy service called dummy45123.  It assumes there will not
be a pre-existing service with that name.
