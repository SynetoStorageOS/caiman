#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
# Copyright (c) 2008, 2010, Oracle and/or its affiliates. All rights reserved. 
#
# README.test - testing procedures
#

AI service choosing engine (AISC)
=================================
Name of executable: /usr/bin/ai_get_manifest
Package: pkg:/system/install/auto-install
Implementation: Python script

Purpose: Serves for obtaining AI and System Configuration (SC) combined manifest
from AI web server (please refer to AI design specification for more details)

Input: List of web servers to be contacted in format <address>:<port>,
Output: Obtained AI and SC combined manifest

[1] Test communication between AI web server and AISC
-----------------------------------------------------
* Prerequisites:
  - Running AI web server (please refer to AI web server testing
    procedure for appropriate information)
  - root privileges

* File containing list of services, e.g.
# cat ./service_list
ai-server.sun.com:8080

* Test procedure
# ./ai_get_manifest -s <service_list> -o <manifest>

* Expected output
ai_manifest file containinig combined AI and SC manifest
obtained from ai-server.sun.com:8080 web server

* Return codes
0 - success
1 - incorrect parameters provided
2 - manifest couldn't be obtained from given web server

[2] List criteria client knows and can provide to AI web server
---------------------------------------------------------------
* Test procedure
# ./ai_get_manifest -l

* Expected output
list of all name-value criteria pairs client can obtain information about

* Return codes
0 - success

[3] Run with increased debug verbosity
--------------------------------------
# ./ai_get_manifest -s <service_list> -o <manifest> -d 1-4

where '-d 4' enables the most verbose mode

AI service discovery engine (AISD)
==================================
Name of executable: /usr/bin/ai_sd
Package: pkg:/system/install/auto-install
Implementation: Python script

Purpose: Tries to look up AI service which could provide AI and System Configuration
(SC) combined manifest valid for the client. Please refer to AI design specification
for more details - it can be obtained from Mercurial workspace
ssh://anon@hg.opensolaris.org/hg/caiman/caiman-docs - AI/ai_design_doc.odt file

Usage:
ai_sd [-s service_type] [-n service_name] [-t timeout] [-d debug_level] [-h] -o discovered_services_file

Input: Service name to look up, timeout
Output: List of AI server providing the service in format <address>:<port>

[1] Test of looking up 'named' service
--------------------------------------
* Prerequisites:
   -none

* Test procedure
[a] Publish service '_test_service' using dns-sd(1M) command
$ dns-sd -R _test_service _OSInstall._tcp local 8081 aiwebserver=tio:8081

[b] Run AISD to look up the service '_test-service'
$ ai_sd -n _test_service -o <service_list>

* Expected output
<service_list> file containing address of AI server in form
'tio:8081'

* Return codes
0 - success
2 - service not found

[2] Test of looking up 'default' service
----------------------------------------
* Prerequisites:
   -none

* Test procedure
[a] Publish service '_default' using dns-sd(1M) command
$ dns-sd -R _default _OSInstall._tcp local 8081 aiwebserver=tio:8081

[b] Run AISD to look up the service '_default'
$ ai_sd -o <service_list>

* Expected output
<service_list> file containing address of AI server in form
'tio:8081'

* Return codes
0 - success
2 - service not found

[3] Run with increased debug verbosity
--------------------------------------
$ ai_sd -n <service_name> -o <service_list> -d 1-4

where '-d 4' enables the most verbose mode

AI Derived Manifest Moduile Testing
===================================
dmm testing is not performed automatically and must be done manually
as they require a user 'aiuser' to be added to the system.

The tests can be run manually by :
 - Ensure userid 'aiuser' exists on the machine
 - As root ensure bldenv script is run.
 - Run each test manually e.g.
   $ cd $SRC/cmd/auto-install/checkpoints/test
   $ python ./dmm_build_test.py
